# -*- coding: utf-8 -*-
"""Bankruptcy project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lq-BmENzKJw6vFO9UNmus50nw8fnd5kY

# Importing libraries
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

"""#Loading Dataset



"""

df=pd.read_excel("/content/bankruptcy-prevention (1).xlsx")
df

"""# Exploratory Data Analysis




"""

#EDA
df.info()

df.head()

df.shape

df.columns

df.describe()

df.dtypes

df.columns

df.isnull().sum()

"""# Data visualization"""

sns.pairplot(df,hue='       class')
plt.show()

df['       class'].replace(['bankruptcy','non-bankruptcy'],[0,1],inplace=True)

corr=df.corr()
sns.heatmap(corr,annot=True)
plt.title("Correlation b/w features and target variables")
plt.show()

sns.boxplot(df)
plt.xticks(rotation=90)
plt.show()

sns.histplot(x='       class',data=df )
plt.xlabel("Non-Bankruptcy and Bankruptcy")
plt.ylabel("Frequency")
plt.title("Occurences of Bankruptcy")
plt.show()

df.hist(figsize=(15,15))
plt.title("Feature Scaling")
plt.show()

sns.barplot(df)
plt.xticks(rotation=90)
plt.show()

"""# Model building"""

x=df.drop(columns=['       class'])#feature extraction
x.head()

y=df['       class']#target variable
y.head()

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

"""# Scaling the features"""

from sklearn.preprocessing import StandardScaler
sc=StandardScaler()
x_train=sc.fit_transform(x_train)
x_test=sc.transform(x_test)

"""# Model building"""

#Decision tree classifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

model=DecisionTreeClassifier()
model.fit(x_train,y_train)
y_pred=model.predict(x_test)

accuracy=accuracy_score(y_test,y_pred)
print(f'Accuracy Score: {accuracy * 100:.2f}%')

# LogisticRegression
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import  classification_report
# Logistic Regression
logreg = LogisticRegression(random_state=42)
logreg.fit(x_train, y_train)

# Make predictions
y_pred_logreg = logreg.predict(x_test)

# Evaluate the model
print(f"Logistic Regression Accuracy: {accuracy_score(y_test, y_pred_logreg):.2f}")
print(classification_report(y_test, y_pred_logreg))

# Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier(random_state=42)
rf.fit(x_train, y_train)

# Make predictions
y_pred_rf = rf.predict(x_test)

# Evaluate the model
print(f"Random Forest Accuracy: {accuracy_score(y_test, y_pred_rf):.2f}")
print(classification_report(y_test, y_pred_rf))

# Support Vector Classifier
from sklearn.svm import SVC # Import the SVC class from sklearn.svm module

svc = SVC(probability=True, random_state=42)
svc.fit(x_train, y_train)

# Make predictions
y_pred_svc = svc.predict(x_test)

# Evaluate the model
print(f"SVC Accuracy: {accuracy_score(y_test, y_pred_svc):.2f}")
print(classification_report(y_test, y_pred_svc))